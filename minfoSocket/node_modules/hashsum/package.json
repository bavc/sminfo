{
  "name": "hashsum",
  "version": "0.0.1",
  "description": "Compute the hashsum of various things",
  "main": "index.js",
  "bin": {
    "hashsum": "bin/hashsum.js"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/brettstimmerman/hashsum.git"
  },
  "homepage": "https://github.com/brettstimmerman/hashsum",
  "keywords": [
    "checksum",
    "hashsum",
    "shasum",
    "hash",
    "sha",
    "sha1",
    "md5"
  ],
  "dependencies": {
    "optimist": "~0.6.0"
  },
  "devDependencies": {
    "jshint": "*",
    "mocha": "*"
  },
  "author": {
    "name": "Brett Stimmerman",
    "email": "brettstimmerman@gmail.com"
  },
  "license": "MIT",
  "readme": "# hashsum\n\nCalculate the hashsum of various things.\n\n\n# installation\n\n```sh\nnpm install hashsum\n```\n\n# usage\n\n```js\nvar hashsum = require('hashsum');\n```\n\n### hash an arbitrary value\n\n```js\nhashsum(value, function (err, hashOrHashes) {\n  console.log(hashOrHashes);\n});\n```\n\n### hash a file's contents\n\n```js\nhashsum.file('/path/to/file', function (err, hash) {\n  console.log(hash);\n});\n```\n\n### hash the contents of each file in a directory\n\n```js\nhashsum.directory('/path/to/dir', function (err, hashes) {\n  for (var path in hashes) {\n    console.log(path, hashes[path]);\n  }\n});\n```\n\n### hash a stream\n\n```js\n// Create or obtain a stream of some kind...\nvar src = fs.createReadStream('/path/to/file');\n\nhashsum.stream(src, function (err, hash) {\n  console.log(hash);\n});\n```\n\n\n# api\n\nCallbacks receive two arguments `(err, hash)`, unless otherwise noted.\n\nAll methods accept an optional `options` object with the following properties:\n\n- `algorithm` - hashing algorithm supported by `crypto.createHash`. Default:\n`sha1`\n\nDirectory-related methods accept additional properties:\n\n- `filterFn` - function used to filter files or directories out of the results.\nReceives the file or directory `path` as an argument. Filter functions should\nreturn `true` to retain the path, or `false` to skip it. Default: `undefined`\n\n- `recursive` - whether to descend into child directories. Default: `false`\n\n- `relativePaths` - whether to use relative paths in the `hashes` object.\nDefault: `false`\n\nExample `filterFn`:\n\n```js\n// Skip paths containing an underscore.\nfunction filter(path) {\n  return path.indexOf('_') === -1;\n}\n\nvar options = { recursive: true, filterFn: filter };\n\nhashsum.directory('/path', options, function (err, hashes) {\n  console.log(hashes);\n});\n```\n\n\n### hashsum(src, [options], cb)\n\nCalculate the hashsum for the given `src`. Internally, `hashsum` will decide the\nbest hashsum API method to use based on the value of `src`.\n\n\nIf `src` is a stream, `hashsum.stream` will be used.\n\nIf `src` is a string, and it is also a path, and a file or directory exists at\nthat location, `hashsum.file` or `hashsum.directory` will be used.\n\nIf it is not a path, or nothing exists at that location, `hashsum.string` will\nbe used.\n\nIf it is any other type, it will be coerced to string via `'' + src` and\n`hashsum.string` will be used.\n\nWhen hashing an object, consider implementing a custom `toString` method on the\nobject, or prepare the source data ahead of time and use `hashsum.string`\ndirectly.\n\n\n### hashsumSync(src, [options])\n\nSynchronous version of `hashsum`. Returns the calculated `hash` or `hashes`.\n\n*Note: Streams cannot be hashed synchronously. Use `hashsum` or `hashsum.stream`\ninstead.*\n\n\n### hashsum.file(path, [options], cb)\n\nCalculate the hashsum for the given file.\n\n### hashsum.fileSync(path, [options])\n\nSynchronous version of `hashsum.file`. Returns the calculated `hash`.\n\n\n### hashsum.directory(path, [options], cb)\n\nCalculate the hashsum for each file in a given directory.\n\nThe callback receives two arguments `(err, hashes)`. Hashes are collected as an\nobject that maps filename to hashsum.\n\nThis example:\n\n```js\nhashsum.directory('/path/to/dir', function (err, hashes) {\n  console.log(hashes);\n});\n```\n\nMight produce this `hashes` object:\n\n```js\n{\n  '/path/to/dir/index.html': 'de59a86eea5cc70b3d3c8c27d210eb23d5e34873',\n  '/path/to/dir/public/css/reset.css': '82bed1345e375f93cadd5494cac046e8ff80ece3',\n  ...\n}\n```\n\nIf the `relativePaths` option is `true`, the `hashes` object might look like the\nfollowing (when run from the `/path/to/dir` directory):\n\n```js\n{\n  'index.html': 'de59a86eea5cc70b3d3c8c27d210eb23d5e34873',\n  'public/css/reset.css': '82bed1345e375f93cadd5494cac046e8ff80ece3',\n  ...\n}\n```\n\n### hashsum.directorySync(path, [options])\n\nSynchonrous version of `hashsum.directory`. Returns the calculated `hashes`.\n\n\n### hashsum.string(str, [options], cb)\n\nCalculate the hashsum for the given string.\n\n### hashsum.stringSync(str, [options])\n\nSynchronous version of `hashsum.string`. Returns the calculated `hash`.\n\n\n### hashsum.stream(src, [options], cb)\n\nCalculate the hashsum for the given stream.\n\n\n# cli\n\n```sh\nnpm install -g hashsum\n```\n\n```\nhashsum [options] <src-1> [...<src-N>]\n\nOptions:\n  -a, --algorithm      Hashing algorithm to use                [default: \"sha1\"]\n  -e, --filter         RegExp for filtering out unwanted paths\n  -f, --format         Output format: text|json                [default: \"text\"]\n  -p, --path           Treat all inputs as paths first, strings second\n  -r, --recursive      Recurse into sub-directories\n  -t, --relativePaths  Use relative paths in directory output\n  -h, --help           Print this help message\n  -v, --version        Print version information\n```\n\n### notes\n\nOn the command line, hashsum's `filter` option is a bit different than the\n`filterFn` option of the module. The hashsum module's `filterFn` option takes a\nfunction, whereas the CLI `filter` option is the pattern of a RegExp. That is,\nthe string `pattern` you would pass to `new RegExp(pattern)`.\n\nWhen specifying `--format json`, source keys are mapped to hash values. This is\nslightly different than `--format text`, which prints hashes before sources.\n\n### examples\n\n```sh\n$ hashsum foo\n0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33 foo\n```\n\n```sh\n$ hashsum foo bar baz\n0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33 foo\n62cdb7020ff920e5aa642c3d4066950dd1f01f4d bar\nbbe960a25ea311d21d40669e93df2003ba9b90a2 baz\n```\n\n```sh\n$ hashsum /path/to/dir -p\nde59a86eea5cc70b3d3c8c27d210eb23d5e34873 /path/to/dir/index.js\n```\n\n```sh\n$ cd /path/to/dir\n$ hashsum /path/to/dir -pt\nde59a86eea5cc70b3d3c8c27d210eb23d5e34873 index.js\n```\n\n```sh\n$ hashsum /path/to/dir -pr\nde59a86eea5cc70b3d3c8c27d210eb23d5e34873 /path/to/dir/index.js\n82bed1345e375f93cadd5494cac046e8ff80ece3 /path/to/dir/node_modules/.bin/jshint\n...\n```\n\n```sh\n$ hashsum /path/to/dir -pr -e node_modules\nde59a86eea5cc70b3d3c8c27d210eb23d5e34873 /path/to/dir/index.js\n```\n\n```sh\n$ cs /path/to/dir\n$ hashsum /path/to/dir -prt -f json\n{\n  \"index.js\": \"de59a86eea5cc70b3d3c8c27d210eb23d5e34873\",\n  \"node_modules/.bin/jshint\": \"82bed1345e375f93cadd5494cac046e8ff80ece3\",\n  ...\n}\n```\n\n```sh\n$ hashsum /path/to/dir -pt -a md5\na1b8790319d43ac420fb25f2b6563887 index.js\n```\n\n#### stdin\n\n```sh\n$ echo -n foo | hashsum\n0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33\n```\n\n```sh\n$ hashsum < /path/to/dir/index.js\nde59a86eea5cc70b3d3c8c27d210eb23d5e34873\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/brettstimmerman/hashsum/issues"
  },
  "_id": "hashsum@0.0.1",
  "dist": {
    "shasum": "04b34614b1272936af719aa8c0adef20575c8d16",
    "tarball": "http://registry.npmjs.org/hashsum/-/hashsum-0.0.1.tgz"
  },
  "_from": "hashsum@*",
  "_npmVersion": "1.3.6",
  "_npmUser": {
    "name": "brett",
    "email": "brettstimmerman@gmail.com"
  },
  "maintainers": [
    {
      "name": "brett",
      "email": "brettstimmerman@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "04b34614b1272936af719aa8c0adef20575c8d16",
  "_resolved": "https://registry.npmjs.org/hashsum/-/hashsum-0.0.1.tgz"
}
